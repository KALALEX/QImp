let genBasisVec = lambda(dim, index){
	if((dim = (0 - 1))){
		[]
	}
	else{
		if((dim = index)){
			prepend(1,genBasisVec((dim - 1),index))
		}
		else{
			prepend(0,genBasisVec((dim - 1),index))
		}
	}
}


let generateMatrix = lambda(operator,basis){
	if(null?(cdr(basis))){
		[ operator(car(basis)) ]
	}
	else{
		append(car(basis) , generateMatrix(operator , cdr(basis)))
	}
}



let identity = lambda(vec){
	vec
}

let hadamard = lambda(vec){
	let n = len(vec)
	let superpos = (1 / sqrt(n))
	hadH(n , superpos)
}

let hadH = lambda(dim,item){
	if((dim = 0)){
		[]
	}	
	else{
		prepend(item , hadH( (dim - 1) , item))
	}
}

print(hadamard([1 0]))